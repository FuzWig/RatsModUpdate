package com.github.alexthe666.rats.client.render.tile;import com.github.alexthe666.rats.server.blocks.BlockChunkyCheeseToken;import com.github.alexthe666.rats.server.blocks.RatlantisBlockRegistry;import com.github.alexthe666.rats.server.blocks.RatsBlockRegistry;import com.github.alexthe666.rats.server.entity.tile.TileEntityToken;import com.mojang.blaze3d.matrix.MatrixStack;import com.mojang.blaze3d.vertex.IVertexBuilder;import net.minecraft.client.Minecraft;import net.minecraft.client.renderer.IRenderTypeBuffer;import net.minecraft.client.renderer.RenderType;import net.minecraft.client.renderer.model.ItemCameraTransforms;import net.minecraft.client.renderer.tileentity.TileEntityRenderer;import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;import net.minecraft.item.ItemStack;import net.minecraft.util.math.vector.Matrix4f;import net.minecraft.util.math.vector.Quaternion;import net.minecraft.util.math.vector.Vector3f;import java.util.Random;public class RenderRatlantisToken extends TileEntityRenderer<TileEntityToken> {    private static final float field_229057_l_ = (float)(Math.sqrt(3.0D) / 2.0D);    public RenderRatlantisToken(TileEntityRendererDispatcher rendererDispatcherIn) {        super(rendererDispatcherIn);    }    @Override    public void render(TileEntityToken entity, float partialTicks, MatrixStack matrixStackIn, IRenderTypeBuffer bufferIn, int combinedLightIn, int combinedOverlayIn) {        float progress = 0;        float f1;        float f2 = 0;        if (entity != null && entity.getWorld() != null && entity.getWorld().getBlockState(entity.getPos()).getBlock() instanceof BlockChunkyCheeseToken) {            progress = entity.ticksExisted - 1 + partialTicks;            for (f1 = entity.ratRotation - entity.ratRotationPrev; f1 >= (float) Math.PI; f1 -= ((float) Math.PI * 2F)) {            }            while (f1 < -(float) Math.PI) {                f1 += ((float) Math.PI * 2F);            }            f2 = entity.ratRotationPrev + f1 * Minecraft.getInstance().getRenderPartialTicks();        }        matrixStackIn.push();        matrixStackIn.translate(0.5D, 0.5D, 0.5D);        matrixStackIn.push();        float upwardSpeed = Math.max(0, (progress - 150F) / 150F);        matrixStackIn.translate(0, Math.min(1.5D, upwardSpeed), 0);        matrixStackIn.push();        float tokenScale = 0.5F;        float rotateSpeed = progress / 3F * progress / 3F;        float masterRot  = rotateSpeed -f2 * (180F / (float) Math.PI) - 90F;        matrixStackIn.scale(tokenScale, tokenScale, tokenScale);        matrixStackIn.rotate(new Quaternion(Vector3f.YP, masterRot, true));        Minecraft.getInstance().getItemRenderer().renderItem(new ItemStack(RatlantisBlockRegistry.CHUNKY_CHEESE_TOKEN), ItemCameraTransforms.TransformType.FIXED, combinedLightIn, combinedOverlayIn, matrixStackIn, bufferIn);        matrixStackIn.pop();        matrixStackIn.push();        if(progress > 150){            float lvt_11_2_ = ((float)progress - 150) / 200.0F;            float lvt_12_2_ = 0.0F;            if (lvt_11_2_ > 0.8F) {                lvt_12_2_ = 0.2F;            }            Random lvt_13_1_ = new Random(432L);            IVertexBuilder lvt_14_1_ = bufferIn.getBuffer(RenderType.getLightning());            matrixStackIn.push();            matrixStackIn.translate(0.0D, 0.0D, -0.0D);            matrixStackIn.scale(0.2F,  0.8F, 0.2F);            for(int lvt_15_1_ = 0; (float)lvt_15_1_ < (lvt_11_2_ + lvt_11_2_ * lvt_11_2_) / 2.0F * 10.0F; ++lvt_15_1_) {                matrixStackIn.rotate(Vector3f.XP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F));                matrixStackIn.rotate(Vector3f.YP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F));                matrixStackIn.rotate(Vector3f.ZP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F));                matrixStackIn.rotate(Vector3f.XP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F));                matrixStackIn.rotate(Vector3f.YP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F));                matrixStackIn.rotate(Vector3f.ZP.rotationDegrees(lvt_13_1_.nextFloat() * 360.0F + lvt_11_2_ * 90.0F));                float lvt_16_1_ = lvt_13_1_.nextFloat() * 20.0F + 5.0F + lvt_12_2_ * 2.0F;                float lvt_17_1_ = lvt_13_1_.nextFloat() * 2.0F + 1.0F + lvt_12_2_ * 2.0F;                Matrix4f lvt_18_1_ = matrixStackIn.getLast().getMatrix();                int lvt_19_1_ = (int)(255.0F * (1.0F - lvt_12_2_));                func_229061_a_(lvt_14_1_, lvt_18_1_, lvt_19_1_);                func_229060_a_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);                func_229062_b_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);                func_229061_a_(lvt_14_1_, lvt_18_1_, lvt_19_1_);                func_229062_b_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);                func_229063_c_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);                func_229061_a_(lvt_14_1_, lvt_18_1_, lvt_19_1_);                func_229063_c_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);                func_229060_a_(lvt_14_1_, lvt_18_1_, lvt_16_1_, lvt_17_1_);            }            matrixStackIn.pop();        }        matrixStackIn.pop();        matrixStackIn.push();        if(progress > 450) {            float progMod = progress - 450;            float blocksScale = Math.min(progMod / 50F, 2);            matrixStackIn.scale(blocksScale, blocksScale, blocksScale);            matrixStackIn.translate(0, 0, 0);            matrixStackIn.push();            matrixStackIn.translate(0, 0.75F * blocksScale * 0.5F, 0);            Minecraft.getInstance().getItemRenderer().renderItem(new ItemStack(RatsBlockRegistry.MARBLED_CHEESE_RAW), ItemCameraTransforms.TransformType.FIXED, combinedLightIn, combinedOverlayIn, matrixStackIn, bufferIn);            matrixStackIn.pop();            matrixStackIn.push();            matrixStackIn.translate(0, 0.5 - 1.25F * blocksScale * 0.5F, 0);            Minecraft.getInstance().getItemRenderer().renderItem(new ItemStack(RatsBlockRegistry.MARBLED_CHEESE_RAW), ItemCameraTransforms.TransformType.FIXED, combinedLightIn, combinedOverlayIn, matrixStackIn, bufferIn);            matrixStackIn.pop();        }        matrixStackIn.pop();        matrixStackIn.pop();        matrixStackIn.pop();    }    private static void func_229061_a_(IVertexBuilder p_229061_0_, Matrix4f p_229061_1_, int p_229061_2_) {        p_229061_0_.pos(p_229061_1_, 0.0F, 0.0F, 0.0F).color(255, 255, 255, p_229061_2_).endVertex();        p_229061_0_.pos(p_229061_1_, 0.0F, 0.0F, 0.0F).color(255, 255, 255, p_229061_2_).endVertex();    }    private static void func_229060_a_(IVertexBuilder p_229060_0_, Matrix4f p_229060_1_, float p_229060_2_, float p_229060_3_) {        p_229060_0_.pos(p_229060_1_, -field_229057_l_ * p_229060_3_, p_229060_2_, -0.5F * p_229060_3_).color(255, 169, 33, 0).endVertex();    }    private static void func_229062_b_(IVertexBuilder p_229062_0_, Matrix4f p_229062_1_, float p_229062_2_, float p_229062_3_) {        p_229062_0_.pos(p_229062_1_, field_229057_l_ * p_229062_3_, p_229062_2_, -0.5F * p_229062_3_).color(255, 169, 33, 0).endVertex();    }    private static void func_229063_c_(IVertexBuilder p_229063_0_, Matrix4f p_229063_1_, float p_229063_2_, float p_229063_3_) {        p_229063_0_.pos(p_229063_1_, 0.0F, p_229063_2_, 1.0F * p_229063_3_).color(255, 169, 33, 0).endVertex();    }}